<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="gcyl.entity.domain.mapper.ex.GoodsSpecExtMapper" >
  <resultMap id="BaseResultMap" type="gcyl.entity.domain.model.GoodsSpec" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="goods_id" property="goodsId" jdbcType="BIGINT" />
    <result column="spec_key" property="specKey" jdbcType="VARCHAR" />
    <result column="spec_name" property="specName" jdbcType="VARCHAR" />
    <result column="spec_price" property="specPrice" jdbcType="DECIMAL" />
    <result column="spec_day_stock" property="specDayStock" jdbcType="INTEGER" />
    <result column="spec_stock" property="specStock" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="gcyl.entity.domain.model.GoodsSpecExample" >
    select
    <include refid="Base_Column_List" />
    from tyg_ms_goods_spec
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>

  <sql id="Base_Column_List" >
    id, spec_name, spec_price, spec_stock
  </sql>

  <!-- 根据商品ID查询规格 -->
  <select id="selectByGoodsId" resultMap="BaseResultMap" parameterType="long" >
    select
    <include refid="Base_Column_List" />, spec_day_stock
    from tyg_ms_goods_spec
    where goods_id = #{goodsId}
    and cut_off = false
  </select>

  <!-- 批量插入 -->
  <insert id="batchInsert" parameterType="java.util.List">
    insert into tyg_ms_goods_spec (goods_id, spec_key, spec_name,
    spec_price, spec_day_stock, spec_stock,
    gmt_create
    )
    values
    <foreach collection="list" item="item" index="index" separator=",">
      (#{goodsId,jdbcType=BIGINT}, #{specKey,jdbcType=VARCHAR}, #{specName,jdbcType=VARCHAR},
      #{specPrice,jdbcType=DECIMAL}, #{specDayStock,jdbcType=INTEGER}, #{specStock,jdbcType=INTEGER},
      #{gmtCreate,jdbcType=TIMESTAMP}
      )
    </foreach>
  </insert>

  <!-- 批量修改 -->
  <update id="batchUpdate" parameterType="java.util.List">
    <foreach collection="list" item="item" index="index" separator=";">
    update tyg_ms_goods_spec
    <set>
      <if test="item.specKey != null" >
        spec_key = #{item.specKey,jdbcType=VARCHAR},
      </if>
      <if test="item.specName != null" >
        spec_name = #{item.specName,jdbcType=VARCHAR},
      </if>
      <if test="item.specPrice != null" >
        spec_price = #{item.specPrice,jdbcType=DECIMAL},
      </if>
      <if test="item.specDayStock != null" >
        spec_day_stock = #{item.specDayStock,jdbcType=INTEGER},
      </if>
      <if test="item.specStock != null" >
        spec_stock = #{item.specStock,jdbcType=INTEGER},
      </if>
      <if test="item.cutOff != null" >
        cut_off = #{item.cutOff,jdbcType=BIT},
      </if>
    </set>
      where id = #{item.id}
    </foreach>
  </update>

  <!-- 恢复商品日库存 -->
  <update id="restockByGoodsId" parameterType="long">
    update tyg_ms_goods_spec
    set spec_stock = spec_day_stock
    where
      goods_id = #{goodsId}
      and cut_off = false
  </update>

  <!-- 恢复所有商品日库存 -->
  <update id="restock">
    update tyg_ms_goods_spec
    set spec_stock = spec_day_stock
    where
      cut_off = false
  </update>
</mapper>